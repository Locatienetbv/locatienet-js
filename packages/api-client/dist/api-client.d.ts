// Generated by dts-bundle-generator v9.5.1

import { Feature, LineString, Point, Position } from 'geojson';

/**
 * Represents the address of a geographical object. Where a string, such as a city or street name, is available in multiple languages, it is returned in the default language specified by the object's location, i.e. in which country it is located. Because addressing schemes vary strongly between countries, most fields are optional.
 */
export type Address = {
	/**
	 * The postal code of the address.
	 */
	postcode?: string | null;
	/**
	 * The street name of the address
	 */
	street?: string | null;
	/**
	 * The HouseNr of the address
	 */
	houseNr?: string | null;
	/**
	 * The district of the address, i.e. the entity below city.
	 */
	district?: string | null;
	/**
	 * The city of the address,
	 */
	city?: string | null;
	/**
	 * The name of the principal country subdivision which the address belongs to
	 */
	province?: string | null;
	/**
	 * Country code according to ISO 3166-1 alpha-2. Defaults to NL. The search will be restricted to this country. When empty, all countries contained in the geocoding data will be included in the search.
	 */
	country?: string | null;
};
type BoundingBox = {
	/**
	 * Minimum value for x dimension. The numerical value has to be less than or equal to maxX.
	 */
	minX?: number;
	/**
	 * Maximum value for x dimension. The numerical value has to be greater than or equal to minX.
	 */
	maxY?: number;
	/**
	 * Minimum value for y dimension. The numerical value has to be less than or equal to maxY.
	 */
	maxX?: number;
	/**
	 * Maximum value for y dimension. The numerical value has to be greater than or equal to minY.
	 */
	minY?: number;
};
/**
 * A coordinate is defined by its x and y values, specifying the geographical point in a two-dimensional coordinate system
 */
export type Coordinate = {
	/**
	 * The value in x-direction (west to east), longitude for WGS84.
	 */
	"x"?: number;
	/**
	 * The value in y-direction (south to north), latitude for WGS84.
	 */
	"y"?: number;
};
/**
 * Represents a geographical object in terms of its position and its address.
 */
type Location$1 = {
	/**
	 * The postal code of the address.
	 */
	postcode?: string | null;
	/**
	 * The street name of the address
	 */
	street?: string | null;
	/**
	 * The HouseNr of the address
	 */
	houseNr?: string | null;
	/**
	 * The district of the address, i.e. the entity below city.
	 */
	district?: string | null;
	/**
	 * The city of the address,
	 */
	city?: string | null;
	/**
	 * The name of the principal country subdivision which the address belongs to
	 */
	province?: string | null;
	/**
	 * Country code according to ISO 3166-1 alpha-2. Defaults to NL. The search will be restricted to this country. When empty, all countries contained in the geocoding data will be included in the search.
	 */
	country?: string | null;
	coordinate?: Coordinate;
	/**
	 * Indicates the overall match quality for a geocoding request. 100 (percent) represents a perfect match between the input and the result.
	 */
	score?: number;
	/**
	 * A radius that specifies how close the route shall pass by the specified coordinate, only to be used with via waypoints. This radius refers to the distance on the road network in meters.
	 * When set there is no output waypoint. The route passes near the specified coordinate.
	 */
	distance?: number | null;
	/**
	 * A single string representing the address, typically consisting of the street, house number, postal code, city, and country. The precise format may differ based on what is appropriate for the address.
	 */
	description?: string | null;
};
/**
 * Defines values for ManeuverType.
 */
export type ManeuverType = "START" | "STARTLEFT" | "STARTRIGHT" | "ARRIVE" | "ARRIVELEFT" | "ARRIVERIGHT" | "CONTINUE" | "KEEPSTRAIGHT" | "KEEPLEFT" | "KEEPRIGHT" | "TURNHALFLEFT" | "TURNLEFT" | "TURNSHARPLEFT" | "TURNHALFRIGHT" | "TURNRIGHT" | "TURNSHARPRIGHT" | "MAKEUTURN" | "TAKEROUNDABOUTLEFT" | "TAKEROUNDABOUTRIGHT" | "TAKECOMBINEDTRANSPORT" | "ENTER" | "ENTERLEFT" | "ENTERRIGHT" | "EXIT" | "EXITLEFT" | "EXITRIGHT" | "CHANGE" | "CHANGELEFT" | "CHANGERIGHT";
export type RoadEvent = "WAYPOINT" | "FERRY" | "TRAIN" | "BORDER" | "TOLL";
export type RouteDescription = {
	/**
	 * The distance of the route from the start up to this description.
	 */
	accDistance?: number;
	/**
	 * The travel time for the route from the start up to this event.
	 */
	accTime?: number;
	/**
	 * A descriptive text for the current maneuver.
	 */
	description?: string | null;
	/**
	 * The city names and road numbers on a signpost at the current location to follow for the current maneuver.
	 */
	directions?: string | null;
	/**
	 * The name of the current road
	 */
	roadName?: string | null;
	/**
	 * The road number
	 */
	roadNumber?: string | null;
	/**
	 * Defines the network class of a road. The road segments are divided into eight network classes by importance of the roads they represent. The network class 0 represents the most important roads, for example highways, while road segments of network class 7 are the least important roads, for example pedestrian paths. Range: 0 ≤ value ≤ 7.
	 */
	networkClass?: number | null;
	maneuverType?: ManeuverType;
	event?: RoadEvent;
	country?: string | null;
	coordinate?: Coordinate;
};
export type CalculateRouteDescriptionResponse = {
	/**
	 * The distance of the complete route.
	 */
	distance?: number;
	/**
	 * The travel time for the complete route.
	 */
	travelTime?: number;
	/**
	 * The total delay due to traffic incidents(traffic jams, construction sites etc.) on the route.
	 */
	trafficDelay?: number | null;
	waypoints?: Array<Location$1> | null;
	/**
	 * List of descriptions describing the route
	 */
	descriptions?: Array<RouteDescription> | null;
	/**
	 * List of coordinates of the polyline of the route
	 */
	polyline?: Array<Coordinate> | null;
};
export type Country = {
	value?: string | null;
	iso2?: string | null;
	iso3?: string | null;
	lang?: Record<string, string> | null;
	bBox?: BoundingBox;
};
/**
 * Defines values for CountryType.
 */
export type CountryType = "ISO31661ALPHA2" | "ISO31661ALPHA3" | "LICENSEPLATE" | "NAME";
export type LocateOptions = {
	/**
	 * The language used for geographic names. Defaults to nl. This standard allows to use two-letter ISO 639-1 codes
	 */
	language?: string | null;
	/**
	 * Limit the number of resulting locations (default 5)
	 */
	numResults?: number | null;
	/**
	 * Minimal score of the results (default 70)
	 */
	minimalResultScore?: number | null;
	outputCountryType?: CountryType;
};
type RouteOptimization = "shortest" | "optimal" | "fastest";
type TimeConsiderationType = "Snapshot" | "ExactAtArrival" | "ExactAtStart";
type VehicleType = "car" | "carfast" | "carslow" | "van" | "vanslow" | "boxtruck" | "truckfast" | "truckslow" | "bicycle" | "pedestrian";
export type RouteOptions = {
	vehicle?: VehicleType;
	optimization?: RouteOptimization;
	/**
	 * The language of texts such as maneuver or traffic-incident descriptions. Defaults to nl. This standard allows to use two-letter ISO 639-1 codes
	 */
	language?: string | null;
	/**
	 * Force the routing algorithm to avoid freeways
	 */
	avoidHighways?: boolean;
	/**
	 * Force the routing algorithm to avoid tollroads
	 */
	avoidToll?: boolean;
	/**
	 * Force the routing algorithm to avoid ferries
	 */
	avoidFerry?: boolean;
	/**
	 * Force the routing algorithm to avoid current traffic
	 */
	avoidTrafficIncidents?: boolean;
	/**
	 * Force the routing algorithm to avoid emissionzones
	 */
	avoidEmissionZones?: boolean;
	referenceTime?: string;
	timeConsiderationType?: TimeConsiderationType;
	/**
	 * Include the polyline of the route. The polyline is a list of sequential coordinates of roadnodes
	 */
	includePolyline?: boolean;
};
/**
 * Extended GeoJSON Point Feature with address information
 *
 * @interface LocateFeatureResult
 * @extends {Feature<Point>}
 */
export interface LocateFeatureResult extends Feature<Point> {
	properties: Location$1;
}
declare function locateByText(query: string, country?: string, options?: LocateOptions): Promise<Array<LocateFeatureResult>>;
declare function locateByAddress(address: Address, options?: LocateOptions): Promise<Array<LocateFeatureResult>>;
declare function locateByPosition(position: Coordinate | Position, options?: LocateOptions): Promise<Array<LocateFeatureResult>>;
/**
 * Extended GeoJSON Linestring Feature with route info
 *
 * @interface RouteInfoFeatureResult
 * @extends {Feature<LineString>}
 */
export interface RouteInfoFeatureResult extends Feature<LineString> {
	properties: {
		distance?: number;
		travelTime?: number;
	};
}
declare function calculateRouteInfo(locations?: Location$1[], options?: RouteOptions): Promise<RouteInfoFeatureResult>;
declare function countries(): Promise<Country[]>;
/** @type {*} */
export declare const Api: {
	apikey: any;
	/**
	 * Search for locations using a free-form text input.
	 *
	 * @param {string} query input
	 * @param {string} [country]
	 * @param {LocateOptions} [options]
	 * @returns {*}  {Promise<Array<LocateFeatureResult>>}
	 */
	locateByText: typeof locateByText;
	/**
	 * Search for locations using structured address input.
	 *
	 * @param {Address} address
	 * @param {LocateOptions} [options]
	 * @returns {*}  {Promise<Array<LocateFeatureResult>>}
	 */
	locateByAddress: typeof locateByAddress;
	/**
	 * Search for addresses using structured coordinate input.
	 *
	 * @param {(Coordinate | Position)} position
	 * @param {LocateOptions} [options]
	 * @returns {*}  {Promise<Array<LocateFeatureResult>>}
	 */
	locateByPosition: typeof locateByPosition;
	/**
	 * Calculates and returns basic route information and polyline as GeoJSON Feature.
	 *
	 * @param {Location[]} [locations]
	 * @param {RouteOptions} [options]
	 * @returns {*}  {Promise<RouteInfoFeatureResult>}
	 */
	calculateRouteInfo: typeof calculateRouteInfo;
	/**
	 * Calculates and returns basic route information, descriptions and polyline.
	 *
	 * @param {Location[]} [locations]
	 * @param {RouteOptions} [options]
	 * @returns {*}  {Promise<CalculateRouteDescriptionResponse>}
	 */
	calculateRoute: typeof calculateRouteInfo;
	/**
	 * Fetch all EU country information, name in different languages and their iso codes
	 *
	 * @returns {*}  {Promise<Country[]>}
	 */
	countries: typeof countries;
};

export {
	Location$1 as Location,
};

export as namespace LocatienetApiClient;

export {};
