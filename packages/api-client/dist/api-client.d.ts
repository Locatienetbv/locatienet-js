// Generated by dts-bundle-generator v9.5.1

type BoundingBox = {
	/**
	 * Minimum value for x dimension. The numerical value has to be less than or equal to maxX.
	 */
	minX?: number;
	/**
	 * Maximum value for x dimension. The numerical value has to be greater than or equal to minX.
	 */
	maxY?: number;
	/**
	 * Minimum value for y dimension. The numerical value has to be less than or equal to maxY.
	 */
	maxX?: number;
	/**
	 * Maximum value for y dimension. The numerical value has to be greater than or equal to minY.
	 */
	minY?: number;
};
type Country = {
	value?: string | null;
	iso2?: string | null;
	iso3?: string | null;
	lang?: Record<string, string> | null;
	bBox?: BoundingBox;
};
type CountryType = "ISO31661ALPHA2" | "ISO31661ALPHA3" | "LICENSEPLATE" | "NAME";
type LocateOptions = {
	/**
	 * The language used for geographic names. Defaults to nl. This standard allows to use two-letter ISO 639-1 codes
	 */
	language?: string | null;
	/**
	 * Limit the number of resulting locations (default 5)
	 */
	numResults?: number | null;
	/**
	 * Minimal score of the results (default 70)
	 */
	minimalResultScore?: number | null;
	outputCountryType?: CountryType;
};
export declare const Api: {
	apikey: any;
	countries: () => Promise<Country[]>;
	locateByText: (query: string, country?: string, options?: LocateOptions) => Promise<{
		type: string;
		geometry: {
			type: string;
			coordinates: (number | undefined)[];
		};
		properties: {
			description: string | null | undefined;
		};
	}[]>;
};

export as namespace LocatienetApiClient;

export {};
